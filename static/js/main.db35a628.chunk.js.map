{"version":3,"sources":["containers/Calculator/Calculator.js","components/CalculatorDisplay.js","components/Hearts/Hearts.js","components/CalculatorButtons.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","displayValue","calculate","setState","eval","e","clear","clearEntry","slice","buttonClickHandler","buttonName","className","this","onClick","Component","CalculatorDisplay","props","fontSize","color","textOverflow","overflow","Hearts","buttonStyling","variantColor","variant","size","margin","width","CalculatorButtons","style","display","flexDirection","Button","name","target","App","ThemeProvider","CSSReset","Text","fontWeight","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db35a628.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Calculator.css';\nimport CalculatorButtons from '../../components/CalculatorButtons';\nimport CalculatorDisplay from '../../components/CalculatorDisplay';\n\nclass Calculator extends Component {\n    state = {\n        displayValue: \"\"\n    }\n\n    calculate = () => {\n        try {\n            this.setState({\n                displayValue: (eval(this.state.displayValue) || \"\") + \"\"\n            });\n        } catch(e) {\n            this.setState({\n                displayValue: \"error\"\n            });\n        };\n    };\n\n    clear = () => {\n        this.setState({\n            displayValue: \"\"\n        });\n    };\n\n    clearEntry = () => {\n        this.setState({\n            displayValue: this.state.displayValue.slice(0, -1)\n        });\n    };\n\n\n    buttonClickHandler = (buttonName) => {\n        if(buttonName === \"=\") {\n            this.calculate();\n        }\n        else if(buttonName === \"C\") {\n            this.clear();\n        }\n        else if(buttonName === \"CE\") {\n            this.clearEntry();\n        }\n        else {\n            this.setState({\n                displayValue: this.state.displayValue + buttonName\n            });\n        }\n    };\n\n\n    render() {\n        return (\n            <div className=\"calculator\">\n                <div className=\"displayDiv\">\n                    <CalculatorDisplay displayValue={this.state.displayValue} />\n                </div>\n                <CalculatorButtons onClick={this.buttonClickHandler} />\n            </div>\n        );\n    }\n}\n\nexport default Calculator;","import React from 'react';\n\nimport {Text} from '@chakra-ui/core';\n\nconst CalculatorDisplay = (props) => {\n\n    let {displayValue} = (props);\n\n    return(\n        <div>\n            <Text\n                fontSize=\"lg\"\n                color=\"gray.700\"\n                textOverflow=\"ellipsis\"\n                overflow=\"hidden\"\n            >{displayValue}</Text>\n        </div>\n    );\n};\n\nexport default CalculatorDisplay;","import React from 'react';\n\nimport './Hearts.css';\n\nconst Hearts = () => (\n    <div className=\"artContainer\">\n        <div className=\"heart\"></div>\n        <div className=\"heart\"></div>\n        <div className=\"heart\"></div>\n    </div>\n);\n\nexport default Hearts;","import React from 'react';\nimport {Button} from \"@chakra-ui/core\";\n\nimport Hearts from './Hearts/Hearts';\n\nconst buttonStyling = {\n    variantColor: \"pink\",\n    variant: \"solid\",\n    size: \"md\",\n    margin: \"2px\",\n    width: \"20px\",\n};\n\nconst CalculatorButtons = (props) => {\n    return(\n   <div>\n    <div style={{display: 'flex', flexDirection: 'row'}}>\n        <Button\n            {...buttonStyling}\n            variantColor=\"purple\"\n            name=\"CE\"\n            onClick={e => props.onClick(e.target.name)}\n        >CE</Button>\n        <Button\n            {...buttonStyling}\n            variantColor=\"purple\"\n            name=\"C\"\n            onClick={e => props.onClick(e.target.name)}\n        >C</Button>\n        <Hearts />\n    </div>\n    <Button\n        {...buttonStyling}\n        name=\"7\"\n        onClick={e => props.onClick(e.target.name)}\n    >7</Button>\n    <Button\n        {...buttonStyling}\n        name=\"8\"\n        onClick={e => props.onClick(e.target.name)}\n    >8</Button>\n    <Button\n        {...buttonStyling}\n        name=\"9\"\n        onClick={e => props.onClick(e.target.name)}\n    >9</Button>\n    <Button\n        {...buttonStyling}\n        name=\"/\"\n        onClick={e => props.onClick(e.target.name)}\n    >/</Button>\n    <br />\n    <Button\n        {...buttonStyling}\n        name=\"4\"\n        onClick={e => props.onClick(e.target.name)}\n    >4</Button>\n    <Button\n        {...buttonStyling}\n        name=\"5\"\n        onClick={e => props.onClick(e.target.name)}\n    >5</Button>\n    <Button\n        {...buttonStyling}\n        name=\"6\"\n        onClick={e => props.onClick(e.target.name)}\n    >6</Button>\n    <Button\n        {...buttonStyling}\n        name=\"*\"\n        onClick={e => props.onClick(e.target.name)}\n    >*</Button>\n    <br />\n    <Button\n        {...buttonStyling}\n        name=\"1\"\n        onClick={e => props.onClick(e.target.name)}\n    >1</Button>\n    <Button\n        {...buttonStyling}\n        name=\"2\"\n        onClick={e => props.onClick(e.target.name)}\n    >2</Button>\n    <Button\n        {...buttonStyling}\n        name=\"3\"\n        onClick={e => props.onClick(e.target.name)}\n    >3</Button>\n    <Button\n        {...buttonStyling}\n        name=\"-\"\n        onClick={e => props.onClick(e.target.name)}\n    >-</Button>\n    <br />\n    <Button\n        {...buttonStyling}\n        name=\"0\"\n        onClick={e => props.onClick(e.target.name)}\n    >0</Button>\n    <Button\n        {...buttonStyling}\n        name=\".\"\n        onClick={e => props.onClick(e.target.name)}\n    >.</Button>\n    <Button\n        {...buttonStyling}\n        name=\"=\"\n        onClick={e => props.onClick(e.target.name)}\n    >=</Button>\n    <Button\n        {...buttonStyling}\n        name=\"+\"\n        onClick={e => props.onClick(e.target.name)}\n    >+</Button>\n   </div>\n    );\n};\n\nexport default CalculatorButtons;","import React from 'react';\nimport './App.css';\n\nimport {ThemeProvider, CSSReset, Text} from '@chakra-ui/core';\nimport Calculator from './containers/Calculator/Calculator';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <div className=\"Div\">\n        <Text\n          fontSize=\"xl\"\n          fontWeight=\"bold\"\n          color=\"gray.700\"\n          padding=\"10px\"\n        >Simple Calculator</Text>\n        <Calculator />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}