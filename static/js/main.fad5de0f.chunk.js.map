{"version":3,"sources":["containers/Calculator/Calculator.js","components/CalculatorDisplay.js","components/NavBar.js","components/Hearts/Hearts.js","components/CalculatorButtons.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","displayValue","calculate","setState","eval","e","clear","clearEntry","slice","buttonClickHandler","buttonName","marginTop","className","fontSize","fontWeight","padding","borderRadius","this","onClick","Component","CalculatorDisplay","props","color","textOverflow","overflow","NavBar","useColorMode","colorMode","toggleColorMode","flexDirection","textAlign","position","top","right","zIndex","variantColor","leftIcon","FaHeart","size","marginLeft","icon","GoMarkGithub","window","open","Hearts","CalculatorButtons","buttonStyling","variant","margin","width","style","display","Button","name","target","App","ThemeProvider","CSSReset","ColorModeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fad5de0f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Text, Box } from \"@chakra-ui/core\";\n\nimport './Calculator.css';\nimport CalculatorButtons from '../../components/CalculatorButtons';\nimport CalculatorDisplay from '../../components/CalculatorDisplay';\nimport NavBar from '../../components/NavBar';\n\nclass Calculator extends Component {\n    state = {\n        displayValue: \"\"\n    }\n\n    calculate = () => {\n        try {\n            this.setState({\n                displayValue: (eval(this.state.displayValue) || \"\") + \"\"\n            });\n        } catch (e) {\n            this.setState({\n                displayValue: \"error\"\n            });\n        };\n    };\n\n    clear = () => {\n        this.setState({\n            displayValue: \"\"\n        });\n    };\n\n    clearEntry = () => {\n        this.setState({\n            displayValue: this.state.displayValue.slice(0, -1)\n        });\n    };\n\n\n    buttonClickHandler = (buttonName) => {\n        if (buttonName === \"=\") {\n            this.calculate();\n        }\n        else if (buttonName === \"C\") {\n            this.clear();\n        }\n        else if (buttonName === \"CE\") {\n            this.clearEntry();\n        }\n        else {\n            this.setState({\n                displayValue: this.state.displayValue + buttonName\n            });\n        }\n    };\n\n\n    render() {\n        return (\n            <Box marginTop={[\"50px\", \"40px\", \"0\"]}>\n                <NavBar />\n                <Text\n                    className=\"text\"\n                    fontSize={[\"2xl\", \"xl\"]}\n                    fontWeight=\"bold\"\n                    padding=\"10px\"\n                >Simple Calculator</Text>\n                <Box className=\"calculator\" padding={[\"15px\", \"10px\"]} borderRadius={[\"6px\", \"4px\"]}>\n                    <div className=\"displayDiv\">\n                        <CalculatorDisplay displayValue={this.state.displayValue} />\n                    </div>\n                    <CalculatorButtons onClick={this.buttonClickHandler} />\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default Calculator;","import React from 'react';\n\nimport { Text } from '@chakra-ui/core';\n\nconst CalculatorDisplay = (props) => {\n\n    let { displayValue } = (props);\n\n    return (\n        <div>\n            <Text\n                fontSize={[\"xl\", \"lg\"]}\n                color=\"gray.700\"\n                textOverflow=\"ellipsis\"\n                overflow=\"hidden\"\n            >{displayValue}</Text>\n        </div>\n    );\n};\n\nexport default CalculatorDisplay;","import React from \"react\";\nimport { IconButton, Button, Flex, useColorMode } from \"@chakra-ui/core\";\nimport { GoMarkGithub } from \"react-icons/go\";\nimport { FaHeart } from \"react-icons/fa\";\n\nconst NavBar = () => {\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    return (\n        <Flex\n            flexDirection=\"row\"\n            textAlign=\"right\"\n            position=\"absolute\"\n            top=\"0\"\n            right=\"0\"\n            zIndex=\"999\"\n            padding=\"6px\"\n        >\n            <Button\n                variantColor={colorMode === \"light\" ? \"pink\" : \"teal\"}\n                leftIcon={colorMode === \"light\" ? \"moon\" : FaHeart}\n                size=\"sm\"\n                fontSize={[\"lg\", \"md\"]}\n                marginLeft=\"auto\"\n                zIndex=\"999\"\n                onClick={toggleColorMode}\n            >\n                {colorMode === \"light\" ? \"Dark\" : \"Pink\"} Mode\n      </Button>\n            <IconButton\n                variantColor=\"purple\"\n                icon={GoMarkGithub}\n                fontSize={[\"lg\", \"md\"]}\n                size=\"sm\"\n                marginLeft=\"6px\"\n                zIndex=\"999\"\n                onClick={() =>\n                    window.open(\"https://github.com/briannamcdonald/react-calculator\")\n                }\n            ></IconButton>\n        </Flex>\n    );\n};\n\nexport default NavBar;","import React from 'react';\n\nimport './Hearts.css';\n\nconst Hearts = () => (\n    <div className=\"artContainer\">\n        <div className=\"heart\"></div>\n        <div className=\"heart\"></div>\n        <div className=\"heart\"></div>\n    </div>\n);\n\nexport default Hearts;","import React from 'react';\nimport { Button, useColorMode } from \"@chakra-ui/core\";\n\nimport Hearts from './Hearts/Hearts';\n\nconst CalculatorButtons = (props) => {\n\n    const { colorMode } = useColorMode();\n\n    const buttonStyling = {\n        variantColor: colorMode === \"light\" ? \"pink\" : \"teal\",\n        variant: \"solid\",\n        fontSize: [\"xl\", \"md\"],\n        margin: \"2px\",\n        width: \"20px\",\n    };\n\n    return (\n        <div>\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\n                <Button\n                    {...buttonStyling}\n                    variantColor=\"purple\"\n                    name=\"CE\"\n                    onClick={e => props.onClick(e.target.name)}\n                >CE</Button>\n                <Button\n                    {...buttonStyling}\n                    variantColor=\"purple\"\n                    name=\"C\"\n                    onClick={e => props.onClick(e.target.name)}\n                >C</Button>\n                <Hearts />\n            </div>\n            <Button\n                {...buttonStyling}\n                name=\"7\"\n                onClick={e => props.onClick(e.target.name)}\n            >7</Button>\n            <Button\n                {...buttonStyling}\n                name=\"8\"\n                onClick={e => props.onClick(e.target.name)}\n            >8</Button>\n            <Button\n                {...buttonStyling}\n                name=\"9\"\n                onClick={e => props.onClick(e.target.name)}\n            >9</Button>\n            <Button\n                {...buttonStyling}\n                name=\"/\"\n                onClick={e => props.onClick(e.target.name)}\n            >/</Button>\n            <br />\n            <Button\n                {...buttonStyling}\n                name=\"4\"\n                onClick={e => props.onClick(e.target.name)}\n            >4</Button>\n            <Button\n                {...buttonStyling}\n                name=\"5\"\n                onClick={e => props.onClick(e.target.name)}\n            >5</Button>\n            <Button\n                {...buttonStyling}\n                name=\"6\"\n                onClick={e => props.onClick(e.target.name)}\n            >6</Button>\n            <Button\n                {...buttonStyling}\n                name=\"*\"\n                onClick={e => props.onClick(e.target.name)}\n            >*</Button>\n            <br />\n            <Button\n                {...buttonStyling}\n                name=\"1\"\n                onClick={e => props.onClick(e.target.name)}\n            >1</Button>\n            <Button\n                {...buttonStyling}\n                name=\"2\"\n                onClick={e => props.onClick(e.target.name)}\n            >2</Button>\n            <Button\n                {...buttonStyling}\n                name=\"3\"\n                onClick={e => props.onClick(e.target.name)}\n            >3</Button>\n            <Button\n                {...buttonStyling}\n                name=\"-\"\n                onClick={e => props.onClick(e.target.name)}\n            >-</Button>\n            <br />\n            <Button\n                {...buttonStyling}\n                name=\"0\"\n                onClick={e => props.onClick(e.target.name)}\n            >0</Button>\n            <Button\n                {...buttonStyling}\n                name=\".\"\n                onClick={e => props.onClick(e.target.name)}\n            >.</Button>\n            <Button\n                {...buttonStyling}\n                name=\"=\"\n                onClick={e => props.onClick(e.target.name)}\n            >=</Button>\n            <Button\n                {...buttonStyling}\n                name=\"+\"\n                onClick={e => props.onClick(e.target.name)}\n            >+</Button>\n        </div>\n    );\n};\n\nexport default CalculatorButtons;","import React from 'react';\nimport './App.css';\n\nimport { ThemeProvider, CSSReset, ColorModeProvider } from '@chakra-ui/core';\nimport Calculator from './containers/Calculator/Calculator';\n\nfunction App() {\n\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <ColorModeProvider>\n        <div className=\"Div\">\n          <Calculator />\n        </div>\n      </ColorModeProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}